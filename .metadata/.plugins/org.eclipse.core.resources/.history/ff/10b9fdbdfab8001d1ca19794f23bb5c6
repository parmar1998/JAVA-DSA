package com.codingninja.PriorityQueue.MinQueue;

import java.util.ArrayList;

public class MAXPriority_Queues_operations<T> {
	private ArrayList<Element<T>> heap;
	
	public MAXPriority_Queues_operations() {
		heap=new ArrayList<>();
	} 
	
	public boolean isEmpty() {
		return heap.isEmpty();
	}
	
	public int getSize() {
		return heap.size();
	}
	
	public T getMax() throws PriortyQueueException {
		if(heap.isEmpty()) {
			throw new PriortyQueueException();
		}
		else{
		return heap.get(0).value;	
		}
	}
	public void insert(T value,int priorty) {
		Element<T> element=new Element<>(value, priorty);
		heap.add(element);
		int childIndex=heap.size()-1;
		int parentIndex= (childIndex-1)/2;
		while(childIndex>0) 
		{
			if(heap.get(childIndex).priorty>heap.get(parentIndex).priorty) {
				Element<T> temp=heap.get(childIndex);
				heap.set(childIndex,heap.get(parentIndex));
			}
			else {
				return;
			}
		}
	}
	public T removeMax() throws PriortyQueueException{
		if(heap.isEmpty()) {
			throw new PriortyQueueException();
		}
		Element<T> removed=heap.get(0);
		T ans=removed.value;
		//swapping the last and first element 7 deleting the last element 
		heap.set(0,heap.get(heap.size()-1));
		heap.remove(heap.size()-1);
		
		int parentIndex = 0;
        int leftChildIndex = 2 * parentIndex + 1;
        int rightChildIndex = 2 * parentIndex + 2;
        int maxIndex = 0;
        while (leftChildIndex < heap.size()) {
        	 if (heap.get(leftChildIndex).priorty > heap.get(maxIndex).priorty) {
                 maxIndex = leftChildIndex;
             }
        }
		return ans;
	}

}
