package com.cn.trie;

import java.util.ArrayList;

public class Trie {
	
	private TrieNode root;
	public int count;
	public Trie() {
	root=new TrieNode('\0');
	}
	
	//ADD FUNCTION
	public void add(String word) {
		addhelper(root, word);
	}
	private void addhelper(TrieNode root,String word) {
		if(word.length()==0) {
			root.isTerminating=true;
			return;
		}
		int childIndex=word.charAt(0)-'a';
		TrieNode child =root.children[childIndex];
		if(child==null) {
			child=new TrieNode(word.charAt(0));
			root.children[childIndex]=child;
			root.childcount++;
		}
		addhelper(root,word.substring(1));
	}
	
	
	//SEARCH FUNCTION
	public boolean search(String word) {
		return searchHelper(root, word);
	}
	private boolean searchHelper(TrieNode root,String word) {
	
		//lets check for last character
		if(word.length()==0) {
			return	root.isTerminating;//here root is the last character since it changes on every call
		}
		int childindex=word.charAt(0)-'a';//assume all words to be small
		TrieNode child=root.children[childindex];
		if(child==null) {
			return false;
		}
		return searchHelper(root, word.substring(1));
	}
	
//	REMOVE FUNCTION
	public void remove(String word) {
		removeHelper(root,word);
	}
	private void removeHelper(TrieNode root,String word) {
		if(word.length()==0) {
			root.isTerminating=false;
			return;
		}
		int childIndex=word.charAt(0)-'a';
		TrieNode child=root.children[childIndex];
		if(child==null) {
			return;
		}
		removeHelper(root, word.substring(1));
		 if (!child.isTerminating && child.childcount == 0) {
	            root.children[childIndex] = null;
	            child = null;
	            root.childcount--;
	        }
	}
	
	//COUNT WORDS
	private int countwords(TrieNode root) {
		int count=0;
		if(root.isTerminating)
			count++;
		for(int i=0;i<26;i++) {
			if(root.children[i]!=null) 
			count+=countwords(root.children[i]);
		}
		return count;
	}
	
	public int countingwords(TrieNode root) {
		return countwords(root);
	}
	
	//PATTERN MATCHING
		
	public boolean patternMatching(ArrayList<String> input, String pattern) {
       
		for (int i = 0; i < input.size(); i++) {
       String word = input.get(i); 
       
       for (int j = 0; j < word.length(); j++) {
           add(word.substring(j)); }}
     
       return search(pattern);
   }
	
	//PALINDROME PAIR
public String reverse(String word) {
		
		String xString="";
		for(int i=word.length()-1;i>=0;i--) {
			xString+=word.charAt(i);
		}
		return xString;
		
	}
	
public boolean isPalindromePair(ArrayList<String> words) {
	
	for(int i=0;i<words.size();i++) {
		
		String string = reverse(words.get(i));
		
		Trie suffixTrie = new Trie();
		for(int j=0;j<string.length();j++) {
			suffixTrie.add(string.substring(j));
		}
		for(String word : words) {
			if(suffixTrie.search(word)) {
				return true;
			}
		}
		
		
	}
	return false;
	
}

	
	//AUTO COMLPLETE
	
	public void AutoComplete(ArrayList<String> input,String word) {
		int i=0;
		while(i<input.size()) {
			String a=input.get(i);
			add(a);
			i++;
		}
		if(root==null||root.childcount==0) {
			return;
		}
		TrieNode a=findaword(root,word);
		String output="";
		allwords(a,word,output);
	}

	private void allwords(TrieNode a, String word, String output)
	{
		if(root==null)
			return ;
		
		if(root!=null&&root.childcount==0) {
			if(output.length()>0) {
				System.out.println(word+output);
			}
			return;
		}
		
		if(root!=null&&root.isTerminating==true) {
			System.out.println(word+output);
		}
		
		for(int i=0;i<root.children.length;i++) {
			if(root.children[i]!=null) {
				String ans=output+root.children[i].data;
				allwords(a.children[i], word, ans);
			}
		}
	}

	private TrieNode findaword(TrieNode root2, String word) {
		if(word.length()==0)
			return root2;
		int childindex=word.charAt(0)-'a';
		TrieNode child=root2.children[childindex];
		if(child==null)
			return null;
		return findaword(child, word.substring(1));
	}
}
