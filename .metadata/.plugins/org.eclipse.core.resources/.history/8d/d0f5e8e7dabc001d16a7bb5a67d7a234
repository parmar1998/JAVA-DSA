package com.CodingNinja.graph;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Graphs {

	//Breadth first traversal 
	public static void BFT_Traversal() {
		
	}
	public static void BFT_Traversal(int matrix[][]) {
		Queue<Integer> pendingVertices=new LinkedList<Integer>();
		boolean visited[]=new boolean[matrix.length];
		visited[0]=true;
		pendingVertices.add(0);
		while(!pendingVertices.isEmpty()) {
			int currentnode=pendingVertices.poll();
			System.out.print(currentvertex+" ");
		}
		}
	//Depth first traversal
	public static void dftTraversal(int matrix[][],int currentVertex,boolean visited[]) {
		
		visited[currentVertex]=true;
		System.out.print(currentVertex+" ");
		
		for(int i=0;i<matrix.length;i++) {
			if(matrix[currentVertex][i]==1 &&visited[i]==false) {
				//i is neighbor of current vertex
				dftTraversal(matrix,i,visited);
			}
		}
	}
	public static void dftTraversal(int matrix[][]) {
		int currentVertex=0;
		boolean[] visited=new boolean[matrix.length];
		dftTraversal(matrix,currentVertex,visited);;
	}
	//TAKING INUT FROM ADJACENCY MATRIX
	public static int[][] Takinginput(){
		Scanner s=new Scanner(System.in);
		int n=s.nextInt();
		int e=s.nextInt();
		int adjMatrix[][]=new int[n][n];
		for(int i=0;i<e;i++) {
			int v1=s.nextInt();
			int v2=s.nextInt();
			adjMatrix[v1][v2]=1;
			adjMatrix[v2][v1]=1;
		}
		
		System.out.println("ADJACENT MATRIX :- ");
		for(int i=0;i<n;i++) {
			for(int j=0;j<n;j++) {
				System.out.print(adjMatrix[i][j]+" ");
			}
			System.out.println();
		}
		s.close();
		return adjMatrix;
	}
	public static void main(String[] args) {
		int matrix[][]=Takinginput();
		dftTraversal(matrix);
	}
}
