package com.cn.graphs2;

public class Board {

	private char board[][];
	private int boardSize=3;
	private char P1Symbol,P2Symbol;
	//count of number of cells that are filled
	private int count;
	private static final char EMPTY=' ';
	public static final int PLAYER1WINS=1;
	public static final int PLAYER2WINS=2;
	public static final int DRAW=3;
	public static final int INCOMPLETE=4;
	public static final int INVALIDMOVE=4;
	
	
	public Board(char p1Symbol,char p2Symbol) {
		board=new char[boardSize][boardSize];
		for(int i=0;i<boardSize;i++) {
			for(int j=0;j<boardSize;j++) {
				board[i][j]=EMPTY;
			}
		}
		this.P1Symbol=p1Symbol;
		this.P2Symbol=p2Symbol;
	}
	
	public void print() {
		System.out.println("_ _ _ _ _ _ _ _ _ _ _ _ _ _ _");
		for(int i=0;i<boardSize;i++) {
		
			for(int j=0;j<boardSize;j++) {
				System.out.println("| "+board[i][j]+" |");
			}
			System.out.println();
		}
		System.out.println();
		System.out.println("_ _ _ _ _ _ _ _ _ _ _ _ _ _ _");
		
	}

	//make the move if its valid & tell the status of the game
	public int move(char symbol, int x, int y) {
		if(x<0||x>=boardSize||y<0||y>=boardSize||board[x][y]!=EMPTY ) {
			return INVALIDMOVE;
		}
		board[x][y]=symbol;
		count++;
		
		//CHECKING FOR ROW
		if(board[x][0]==board[x][1]&&board[x][0]==board[x][2]) {
			return symbol==P1Symbol?PLAYER1WINS:PLAYER2WINS;
		}
		//CHECKING FOR COLUMN
		if(board[0][y]==board[1][y]&&board[0][y]==board[2][y]) {
			return symbol==P1Symbol?PLAYER1WINS:PLAYER2WINS;
		}
		//CHECKING FOR DIAGONAL
		if(board[0][0]!=EMPTY ||board[0][0]==board[1][1]&&board[0][0]==board[2][2]) {
			return symbol==P1Symbol?PLAYER1WINS:PLAYER2WINS;
		}
		if(board[0][0]!=EMPTY || board[2][2]==board[1][1]&&board[2][2]==board[0][2]) {
			return symbol==P1Symbol?PLAYER1WINS:PLAYER2WINS;
		}
		if(count==boardSize*boardSize) {
			return DRAW;
		}
		return INCOMPLETE;
	}
	
	
}
