package com.cn.recursion;

public class Solution {

	// print factorial
	public static int factorial(int number) {
		int output = 1;
		if (number >= 1) {
			int smallop = factorial(number - 1);
			output = number * smallop;
		}
		return output;
	}

	// print sum
	public static int sum(int number) {
		int output = 0;
		if (number == 0) {
			return 0;
		} else {
			int smallOutput = sum(number - 1);
			output = number + smallOutput;
		}
		return output;
	}

	// Fibonacci Series
	public static int fibonacci(int n) {
		if (n == 1 || n == 2) {
			return 1;
		}
		int fib1 = fibonacci(n - 1);
		int fib2 = fibonacci(n - 2);
		int output = fib1 + fib2;

		return output;
	}

	// checking a number present in array
	public static boolean check(int arr[], int si, int x) {
		if (arr[si] == x) {
			return true;
		}
		if (si == arr.length) {
			return false;
		}

		return check(arr, si + 1, x);
	}

	// merging 2 sorted array into a bigger
	public static void mergeSort(int array[], int low, int high) {
		if (high <= low)
			return;
		int mid = (low + high) / 2;
		mergeSort(array, low, mid);
		mergeSort(array, mid + 1, high);
		merge(array, low, mid, high);
	}

	public static void merge(int array[], int low, int mid, int high) {
		int leftArray[] = new int[mid - low + 1];
		int rightArray[] = new int[high - mid];
		for (int i = 0; i < leftArray.length; i++)
			leftArray[i] = array[low + i];

		for (int i = 0; i < rightArray.length; i++)
			leftArray[i] = array[mid + i + 1];

		int leftindex = 0;
		int rightindex = 0;
		for (int i = low; i < high + 1; i++) {
			if (leftindex < leftArray.length && rightindex < rightArray.length) {
				if (leftArray[leftindex] < rightArray[rightindex]) {
					array[i] = leftArray[leftindex];
					leftindex++;
				}
			} else if (leftindex < leftArray.length) {
				array[i] = leftArray[leftindex];
				leftindex++;
			} else if (rightindex < rightArray.length) {
				array[i] = rightArray[rightindex];
				rightindex++;
			}
		}
	}

	// multiply 2 no.'s using recursion
	public static int multiply(int m, int n) {
		if (n == 0)
			return 0;
		else
			return (m + multiply(m, n - 1));
	}

	// power of n
	public static int power(int x, int n) {
		if (n != 0) {
			return (x * power(x, n - 1));
		} else {
			return 1;
		}
	}

	// print till n numbers
	public static void print(int n) {
		if (n == 0) {
			return;
		} else {
			System.out.println(n + " ");
			print(n - 1);
		}
	}

	// QuickSort
	public static void swap(int arr[], int i, int j) {
		int temp = arr[i];
		arr[i] = arr[j];
		arr[j] = temp;
	}

	public static int partition(int arr[], int low, int high) {
		int pivot = arr[high];
		int i = (low - 1);
		for (int j = low; j <= high - 1; j++) {
			if (arr[j] < pivot) {
				i++;
				swap(arr, i, j);
			}
		}
		swap(arr, i + 1, high);
		return (i + 1);
	}

	public static void quickSort(int arr[], int low, int high) {
		if (low < high) {
			int pi = partition(arr, low, high);
			quickSort(arr, low, pi - 1);
			quickSort(arr, pi + 1, high);
		}
	}

	// remove a char
	public static String removeChar(String input) {
		if (input.length() == 0) {
			return input;
		}
		String smallOutput = removeChar(input.substring(1));
		if (input.charAt(0) == 'x') {
			return "" + smallOutput;
		} else {
			return input.charAt(0) + smallOutput;
		}
	}

	// remove consecutive duplicate
	public static String removeConsecutiveDuplicates(String s) {
		if (s.length() <= 1) {
			return s;
		}
		if (s.charAt(0) == s.charAt(1)) {
			return removeChar(s.substring(1));
		} else {
			return s.charAt(0) + removeConsecutiveDuplicates(s.substring(1));
		}
	}

	// sorted array
	public static boolean sortedornot(int a[]) {
		if (a.length == 1) {
			return true;
		}
		if (a[0] > a[1]) {
			return false;
		}
		int[] smallArray = new int[a.length - 1];
		for (int i = 1; i < a.length; i++) {
			smallArray[i - 1] = a[i];
		}
		boolean sortedsmallArray = sortedornot(smallArray);
		return sortedsmallArray;
	}

	// permutations of String using recursion
	public static void permutations(String input) {
		permutationsHelper(input, " ");
	}

	public static void permutationsHelper(String input, String ans) {
		if (input.length() == 0) {
			System.out.println(ans + " ");
		}
		for (int i = 0; i < input.length(); i++) {
			char ch = input.charAt(i);
			String ros = input.substring(0, i) + input.substring(i + 1);
			permutationsHelper(ros, ans + ch);
		}
	}

	// find geometric sum using k
	public static double findGeometricSum(int k) {
		if (k == 0)
			return 1;
		double ans = 1 / (double) Math.pow(2, k) + findGeometricSum(k - 1);
		return ans;
	}

	// is String palindrome
	public static boolean isStringpalindrome(String input, int s, int e) {
		if (s == e)
			return true;

		if (input.charAt(s) != input.charAt(e))
			return false;

		if (s < e + 1)
			return isStringpalindrome(input, s + 1, e - 1);
		return true;
	}

	// is power of 2
	public static boolean isPoweroftwo(int n) {
		if (n == 1)
			return true;
		if (n <= 0 || n % 2 != 0)
			return false;
		return isPoweroftwo(n / 2);
	}

	public static void main(String[] args) {
		System.out.println(isPoweroftwo(64));
	}
}
