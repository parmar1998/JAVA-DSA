In Java, the keyword "static" is used to create a static member, which belongs to the class itself rather than to a specific instance of the class.

Here are some of the main uses of static in Java:

Static variables: A static variable is a variable that belongs to the class, rather than to a specific instance of the class. There is only one copy of the static variable, regardless of how many instances of the class are created. Static variables are typically used to store information that is common to all instances of the class.

Static methods: A static method is a method that belongs to the class, rather than to a specific instance of the class. Static methods can be called directly from the class, without the need to create an instance of the class. Static methods are typically used for utility methods that don't require access to instance variables.

Static blocks: A static block is a block of code that is executed when the class is loaded into memory. Static blocks are typically used to initialize static variables.

Here are some examples of how static is used in Java:

Static variable example:
csharp
Copy code
public class MyClass {
   static int myStaticVariable = 0;

   public void myMethod() {
      myStaticVariable++;
   }
}
In this example, "myStaticVariable" is a static variable that belongs to the class "MyClass". The value of the static variable can be accessed and modified from any instance of the class.

Static method example:
csharp
Copy code
public class MyClass {
   public static void myStaticMethod() {
      System.out.println("Hello, world!");
   }
}
In this example, "myStaticMethod" is a static method that belongs to the class "MyClass". The method can be called directly from the class, without the need to create an instance of the class.

Static block example:
arduino
Copy code
public class MyClass {
   static int myStaticVariable;

   static {
      myStaticVariable = 10;
   }
}
In this example, the static block initializes the static variable "myStaticVariable" to the value 10 when the class is loaded into memory.




Polymorphism - Many Forms

abstract class

checked exception VS Unchecked Exception 
compile time(sub class of exception/JVM nned to catch the exception/class NOT found exception) vs Runtime(generated by program of exception/arithmetic/nullpointer)













